<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\SIM\SVC.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\SIM\SVC.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Nov 19 22:01:11 2020
<BR><P>
<H3>Maximum Stack Usage =        304 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[93]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">MemManage_Handler</a><BR>
 <LI><a href="#[9]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">BusFault_Handler</a><BR>
 <LI><a href="#[a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">UsageFault_Handler</a><BR>
 <LI><a href="#[c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">DebugMon_Handler</a><BR>
 <LI><a href="#[d]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">PendSV_Handler</a><BR>
 <LI><a href="#[e]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">SysTick_Handler</a><BR>
 <LI><a href="#[25]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[9]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[31]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from hal.o(.emb_text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[e]">SysTick_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[40]">SystemInit</a> from system_lpc17xx.o(.text) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[10]">TIMER0_IRQHandler</a> from timer.o(.emb_text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">TIMER1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">TIMER2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">TIMER3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">UART0_IRQHandler</a> from uart_irq.o(.emb_text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">UART1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">UART3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4c]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[3e]">k_get_time</a> from k_time.o(.text) referenced from twenty_four_hour_wall_clock.o(.text)
 <LI><a href="#[33]">k_mbx_create</a> from k_msg.o(.text) referenced 5 times from lcd_task.o(.text)
 <LI><a href="#[3c]">k_mbx_ls</a> from k_msg.o(.text) referenced 2 times from kcd_task.o(.text)
 <LI><a href="#[32]">k_mem_alloc</a> from k_mem.o(.text) referenced 5 times from lcd_task.o(.text)
 <LI><a href="#[48]">k_mem_dealloc</a> from k_mem.o(.text) referenced 2 times from ae_priv_tasks.o(.text)
 <LI><a href="#[34]">k_recv_msg</a> from k_msg.o(.text) referenced 5 times from lcd_task.o(.text)
 <LI><a href="#[3d]">k_recv_msg_nb</a> from k_msg.o(.text) referenced 2 times from twenty_four_hour_wall_clock.o(.text)
 <LI><a href="#[44]">k_rtx_init</a> from k_rtx_init.o(.text) referenced from ae_main_svc.o(.text)
 <LI><a href="#[39]">k_send_msg</a> from k_msg.o(.text) referenced 4 times from kcd_task.o(.text)
 <LI><a href="#[49]">k_tsk_create</a> from k_task.o(.text) referenced from ae_usr_tasks.o(.text)
 <LI><a href="#[46]">k_tsk_create_rt</a> from k_task.o(.text) referenced from ae_priv_tasks.o(.text)
 <LI><a href="#[4b]">k_tsk_done_rt</a> from k_task.o(.text) referenced from ae_usr_tasks.o(.text)
 <LI><a href="#[47]">k_tsk_exit</a> from k_task.o(.text) referenced 2 times from ae_priv_tasks.o(.text)
 <LI><a href="#[3b]">k_tsk_get</a> from k_task.o(.text) referenced 2 times from kcd_task.o(.text)
 <LI><a href="#[3a]">k_tsk_ls</a> from k_task.o(.text) referenced 2 times from kcd_task.o(.text)
 <LI><a href="#[4a]">k_tsk_set_prio</a> from k_task.o(.text) referenced from ae_usr_tasks.o(.text)
 <LI><a href="#[3f]">k_tsk_suspend</a> from k_task.o(.text) referenced from twenty_four_hour_wall_clock.o(.text)
 <LI><a href="#[37]">kcd_task</a> from kcd_task.o(.text) referenced 2 times from k_task.o(.text)
 <LI><a href="#[36]">lcd_task</a> from lcd_task.o(.text) referenced 2 times from k_task.o(.text)
 <LI><a href="#[35]">null_task</a> from null_task.o(.text) referenced 2 times from k_task.o(.text)
 <LI><a href="#[43]">putc</a> from uart_polling.o(.text) referenced from ae_main_svc.o(.text)
 <LI><a href="#[38]">putcp</a> from printf.o(.text) referenced from printf.o(.text)
 <LI><a href="#[98]">task1</a> from ae_usr_tasks.o(.text) referenced from ae_usr_tasks.o(.text)
 <LI><a href="#[97]">task2</a> from ae_usr_tasks.o(.text) referenced 2 times from ae_usr_tasks.o(.text)
 <LI><a href="#[45]">task_rt1</a> from ae_usr_tasks.o(.text) referenced from ae_priv_tasks.o(.text)
 <LI><a href="#[95]">task_test_manager</a> from ae_priv_tasks.o(.text) referenced from ae_priv_tasks.o(.text)
 <LI><a href="#[42]">wall_clock_task</a> from twenty_four_hour_wall_clock.o(.text) referenced from ae_main_svc.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4f]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[9a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[9b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[50]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[9c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[54]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[9d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[af]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[59]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[b2]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[b3]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[b4]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[b5]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[b6]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[b7]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[b8]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[4e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[b9]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[51]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[53]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[ba]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[55]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[94]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[58]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[bc]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[14]"></a>UART0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart_irq.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART0_IRQHandler &rArr; c_UART0_IRQHandler &rArr; k_send_msg &rArr; task_switch &rArr; ready_queue_push &rArr; ready_queue_insert_deadline_based
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIMER0_IRQHandler &rArr; c_TIMER0_IRQHandler &rArr; task_switch &rArr; ready_queue_push &rArr; ready_queue_insert_deadline_based
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_TIMER0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>__push_all_regs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_recv_msg
</UL>

<P><STRONG><a name="[6f]"></a>__pop_all_regs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_recv_msg
</UL>

<P><STRONG><a name="[7a]"></a>__rte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
</UL>

<P><STRONG><a name="[7b]"></a>__rte_unpriv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
</UL>

<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hal.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>k_rtx_init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, k_rtx_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = k_rtx_init &rArr; k_tsk_init &rArr; k_mbx_create &rArr; k_mem_alloc &rArr; remove
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_yield
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ae_main_svc.o(.text)
</UL>
<P><STRONG><a name="[36]"></a>lcd_task</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, lcd_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_task
</UL>
<BR>[Address Reference Count : 2]<UL><LI> k_task.o(.text)
<LI> ae_main_svc.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>uart_irq_init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, uart_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_rtx_init
</UL>

<P><STRONG><a name="[5c]"></a>c_UART0_IRQHandler</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, uart_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = c_UART0_IRQHandler &rArr; k_send_msg &rArr; task_switch &rArr; ready_queue_push &rArr; ready_queue_insert_deadline_based
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>timer_init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_rtx_init
</UL>

<P><STRONG><a name="[5d]"></a>c_TIMER0_IRQHandler</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = c_TIMER0_IRQHandler &rArr; task_switch &rArr; ready_queue_push &rArr; ready_queue_insert_deadline_based
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_lt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_add
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_push
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[60]"></a>k_mem_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, k_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = k_mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_rtx_init
</UL>

<P><STRONG><a name="[6a]"></a>insert</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, k_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = insert
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_dealloc
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_alloc
</UL>

<P><STRONG><a name="[69]"></a>remove</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, k_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = remove
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_alloc
</UL>

<P><STRONG><a name="[32]"></a>k_mem_alloc</STRONG> (Thumb, 156 bytes, Stack size 36 bytes, k_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = k_mem_alloc &rArr; remove
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create_rt
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_create
</UL>
<BR>[Address Reference Count : 5]<UL><LI> kcd_task.o(.text)
<LI> twenty_four_hour_wall_clock.o(.text)
<LI> lcd_task.o(.text)
<LI> ae_usr_tasks.o(.text)
<LI> ae_priv_tasks.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>merge_adj_nodes</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, k_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_dealloc
</UL>

<P><STRONG><a name="[48]"></a>k_mem_dealloc</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, k_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = k_mem_dealloc &rArr; insert
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;merge_adj_nodes
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create_rt
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_exit
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_create
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ae_usr_tasks.o(.text)
<LI> ae_priv_tasks.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>k_mem_count_extfrag</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, k_mem.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>k_mbx_create</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, k_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = k_mbx_create &rArr; k_mem_alloc &rArr; remove
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_dealloc
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create_rt
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_init
</UL>
<BR>[Address Reference Count : 5]<UL><LI> kcd_task.o(.text)
<LI> twenty_four_hour_wall_clock.o(.text)
<LI> lcd_task.o(.text)
<LI> ae_usr_tasks.o(.text)
<LI> ae_priv_tasks.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>mailbox_insert</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, k_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mailbox_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_send_msg
</UL>

<P><STRONG><a name="[39]"></a>k_send_msg</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, k_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = k_send_msg &rArr; task_switch &rArr; ready_queue_push &rArr; ready_queue_insert_deadline_based
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailbox_insert
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_push
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_done_rt
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_exit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 4]<UL><LI> kcd_task.o(.text)
<LI> twenty_four_hour_wall_clock.o(.text)
<LI> ae_usr_tasks.o(.text)
<LI> ae_priv_tasks.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>mailbox_remove</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, k_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mailbox_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_recv_msg_nb
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_recv_msg
</UL>

<P><STRONG><a name="[34]"></a>k_recv_msg</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, k_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = k_recv_msg &rArr; task_switch &rArr; ready_queue_push &rArr; ready_queue_insert_deadline_based
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_scheduler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailbox_remove
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pop_all_regs
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__push_all_regs
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
</UL>
<BR>[Address Reference Count : 5]<UL><LI> kcd_task.o(.text)
<LI> twenty_four_hour_wall_clock.o(.text)
<LI> lcd_task.o(.text)
<LI> ae_usr_tasks.o(.text)
<LI> ae_priv_tasks.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>k_recv_msg_nb</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, k_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = k_recv_msg_nb &rArr; mailbox_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailbox_remove
</UL>
<BR>[Address Reference Count : 2]<UL><LI> twenty_four_hour_wall_clock.o(.text)
<LI> ae_usr_tasks.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>k_mbx_ls</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, k_msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = k_mbx_ls
</UL>
<BR>[Address Reference Count : 2]<UL><LI> kcd_task.o(.text)
<LI> ae_usr_tasks.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>ready_queue_insert_deadline_based</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ready_queue_insert_deadline_based
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_eq
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_lt
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_suspend
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_done_rt
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_push
</UL>

<P><STRONG><a name="[73]"></a>get_index_from_prio</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, k_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_scheduler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_push
</UL>

<P><STRONG><a name="[68]"></a>ready_queue_push</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ready_queue_push &rArr; ready_queue_insert_deadline_based
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_index_from_prio
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_insert_deadline_based
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create_rt
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_set_prio
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_TIMER0_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_send_msg
</UL>

<P><STRONG><a name="[74]"></a>get_new_task_id</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_new_task_id
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create_rt
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_init
</UL>

<P><STRONG><a name="[61]"></a>k_tsk_init</STRONG> (Thumb, 510 bytes, Stack size 56 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = k_tsk_init &rArr; k_mbx_create &rArr; k_mem_alloc &rArr; remove
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_get_time
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_task_id
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_create
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_alloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_add
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_push
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_rtx_init
</UL>

<P><STRONG><a name="[64]"></a>ready_queue_pop</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, k_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_scheduler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>task_scheduler</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = task_scheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_index_from_prio
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_suspend
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_done_rt
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_set_prio
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_exit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_yield
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_recv_msg
</UL>

<P><STRONG><a name="[66]"></a>task_switch</STRONG> (Thumb, 526 bytes, Stack size 24 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = task_switch &rArr; ready_queue_push &rArr; ready_queue_insert_deadline_based
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_sub
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_get_time
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_CONTROL
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rte_unpriv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rte
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_add
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_push
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_suspend
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_done_rt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create_rt
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_set_prio
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_exit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_yield
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_recv_msg
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_TIMER0_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_send_msg
</UL>

<P><STRONG><a name="[62]"></a>k_tsk_yield</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = k_tsk_yield &rArr; task_switch &rArr; ready_queue_push &rArr; ready_queue_insert_deadline_based
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_scheduler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_rtx_init
</UL>

<P><STRONG><a name="[49]"></a>k_tsk_create</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = k_tsk_create &rArr; task_switch &rArr; ready_queue_push &rArr; ready_queue_insert_deadline_based
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_task_id
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_alloc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ae_usr_tasks.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>k_tsk_exit</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = k_tsk_exit &rArr; k_send_msg &rArr; task_switch &rArr; ready_queue_push &rArr; ready_queue_insert_deadline_based
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_sub
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_gt
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_get_time
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_scheduler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_dealloc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_send_msg
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ae_usr_tasks.o(.text)
<LI> ae_priv_tasks.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>ready_queue_remove</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ready_queue_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_set_prio
</UL>

<P><STRONG><a name="[4a]"></a>k_tsk_set_prio</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = k_tsk_set_prio &rArr; task_switch &rArr; ready_queue_push &rArr; ready_queue_insert_deadline_based
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_remove
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_scheduler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ae_usr_tasks.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>k_tsk_get</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = k_tsk_get &rArr; timeval_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_sub
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_get_time
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_add
</UL>
<BR>[Address Reference Count : 2]<UL><LI> kcd_task.o(.text)
<LI> ae_usr_tasks.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>k_tsk_ls</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = k_tsk_ls
</UL>
<BR>[Address Reference Count : 2]<UL><LI> kcd_task.o(.text)
<LI> ae_usr_tasks.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>k_tsk_create_rt</STRONG> (Thumb, 512 bytes, Stack size 72 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = k_tsk_create_rt &rArr; task_switch &rArr; ready_queue_push &rArr; ready_queue_insert_deadline_based
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_get_time
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_task_id
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mbx_create
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_dealloc
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mem_alloc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_lt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_add
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ae_priv_tasks.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>k_tsk_done_rt</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = k_tsk_done_rt &rArr; k_send_msg &rArr; task_switch &rArr; ready_queue_push &rArr; ready_queue_insert_deadline_based
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_gt
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_get_time
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_insert_deadline_based
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_scheduler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_send_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ae_usr_tasks.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>k_tsk_suspend</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = k_tsk_suspend &rArr; task_switch &rArr; ready_queue_push &rArr; ready_queue_insert_deadline_based
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_get_time
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_insert_deadline_based
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_scheduler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeval_add
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> twenty_four_hour_wall_clock.o(.text)
</UL>
<P><STRONG><a name="[3e]"></a>k_get_time</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, k_time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_suspend
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_done_rt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create_rt
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_get
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_exit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> twenty_four_hour_wall_clock.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>timeval_add</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, k_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timeval_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_suspend
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create_rt
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_get
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>timeval_sub</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, k_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timeval_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_get
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_exit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
</UL>

<P><STRONG><a name="[7c]"></a>timeval_gt</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, k_time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_done_rt
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_exit
</UL>

<P><STRONG><a name="[67]"></a>timeval_lt</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, k_time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_tsk_create_rt
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_insert_deadline_based
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>timeval_eq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, k_time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_queue_insert_deadline_based
</UL>

<P><STRONG><a name="[82]"></a>tfp_format</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchw
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2i
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2a
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui2a
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_sprintf
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
</UL>

<P><STRONG><a name="[8d]"></a>init_printf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>tfp_printf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_format
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_rt1
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_test_manager
</UL>

<P><STRONG><a name="[85]"></a>tfp_sprintf</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_format
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putcp
</UL>

<P><STRONG><a name="[8c]"></a>uart_init</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, uart_polling.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>uart_get_char</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uart_polling.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>uart_put_char</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, uart_polling.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_string
</UL>

<P><STRONG><a name="[86]"></a>uart_put_string</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, uart_polling.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_char
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
</UL>

<P><STRONG><a name="[43]"></a>putc</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, uart_polling.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = putc &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_string
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ae_main_svc.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>form_task_list</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, kcd_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = form_task_list
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kcd_task
</UL>

<P><STRONG><a name="[88]"></a>char_to_index</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, kcd_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kcd_task
</UL>

<P><STRONG><a name="[37]"></a>kcd_task</STRONG> (Thumb, 694 bytes, Stack size 128 bytes, kcd_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = kcd_task &rArr; form_task_list
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_to_index
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_task_list
</UL>
<BR>[Address Reference Count : 2]<UL><LI> k_task.o(.text)
<LI> ae_main_svc.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>null_task</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, null_task.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> k_task.o(.text)
<LI> ae_main_svc.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>wall_clock_task</STRONG> (Thumb, 908 bytes, Stack size 48 bytes, twenty_four_hour_wall_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wall_clock_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ae_main_svc.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8a]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, system_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[40]"></a>SystemInit</STRONG> (Thumb, 316 bytes, Stack size 0 bytes, system_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[bf]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>set_fixed_tasks</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, ae_main_svc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>set_wall_clock_task1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ae_main_svc.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>set_wall_clock_task</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ae_main_svc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>main</STRONG> (Thumb, 80 bytes, Stack size 304 bytes, ae_main_svc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = main
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_task
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_timer_init_100MHZ
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wall_clock_task
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_fixed_tasks
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[52]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[57]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[8e]"></a>ae_timer_init_100MHZ</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, ae_timer_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>ae_get_tick</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ae_timer_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_rt1
</UL>

<P><STRONG><a name="[c4]"></a>ae_diff_ticks</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ae_timer_1.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>get_test_result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ae_priv_tasks.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>create_rt</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, ae_priv_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = create_rt
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_test_manager
</UL>

<P><STRONG><a name="[95]"></a>task_test_manager</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, ae_priv_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = task_test_manager &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_rt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ae_priv_tasks.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>set_test_task</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ae_priv_tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c6]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>task2</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ae_usr_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = task2 &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ae_usr_tasks.o(.text)
</UL>
<P><STRONG><a name="[98]"></a>task1</STRONG> (Thumb, 94 bytes, Stack size 72 bytes, ae_usr_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = task1 &rArr; uart_put_string
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_put_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ae_usr_tasks.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>set_usr_task_info</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ae_usr_tasks.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>task_rt1</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, ae_usr_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = task_rt1 &rArr; tfp_printf &rArr; tfp_format &rArr; putchw
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_get_tick
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ae_priv_tasks.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[c8]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[63]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uart_irq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_init
</UL>

<P><STRONG><a name="[77]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, k_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
</UL>

<P><STRONG><a name="[76]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, k_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
</UL>

<P><STRONG><a name="[78]"></a>__get_CONTROL</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, k_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
</UL>

<P><STRONG><a name="[79]"></a>__set_CONTROL</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, k_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_switch
</UL>

<P><STRONG><a name="[7f]"></a>ui2a</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ui2a
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_format
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2a
</UL>

<P><STRONG><a name="[7e]"></a>i2a</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = i2a &rArr; ui2a
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui2a
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_format
</UL>

<P><STRONG><a name="[81]"></a>a2d</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, printf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2i
</UL>

<P><STRONG><a name="[80]"></a>a2i</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = a2i
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2d
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_format
</UL>

<P><STRONG><a name="[83]"></a>putchw</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = putchw
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_format
</UL>

<P><STRONG><a name="[38]"></a>putcp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfp_sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
